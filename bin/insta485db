#!/bin/bash
#
# insta485db
#
# Script for common database commands

# Stop on errors, print commands
# See https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

if [ "$#" -eq 0 ]; then  # semicolon separates two commands present in one line
    echo "Usage: ./bin/insta485db (create|destroy|reset|dump|random)"
    exit 1
fi

if [ "$1" = "create" ]; then
    if [ -f var/insta485.sqlite3 ]; then  # -f [path] checks for existence of path
        echo "Error: database already exists"
        exit 1
    fi  # closes if statement
    set -x  # prints command execution to terminal
    mkdir -p var/uploads
    sqlite3 var/insta485.sqlite3 < sql/schema.sql
    sqlite3 var/insta485.sqlite3 < sql/data.sql
    cp sql/uploads/* var/uploads/

elif [ "$1" = "destroy" ]; then
    set -x  # prints command execution to terminal
    rm -rf var/insta485.sqlite3 var/uploads

elif [ "$1" = "reset" ]; then
    set -x  # prints command execution to terminal
    bin/insta485db destroy
    bin/insta485db create
    
elif [ "$1" = "dump" ]; then
    echo "Users:"
    set -x  # prints command execution to terminal
    sqlite3 -batch -line var/insta485.sqlite3 'SELECT * FROM users'
    # lines like the one below:
    #   1. "set +x" disables printing command execution to terminal
    #   2. prints a newline, prints table
    #   3. enables printing command execution to terminal again
    set +x; echo ""; echo "Posts:"; set -x
    sqlite3 -batch -line var/insta485.sqlite3 'SELECT * FROM posts'
    set +x; echo ""; echo "Following:"; set -x
    sqlite3 -batch -line var/insta485.sqlite3 'SELECT * FROM following'
    set +x; echo ""; echo "Comments:"; set -x
    sqlite3 -batch -line var/insta485.sqlite3 'SELECT * FROM comments'
    set +x; echo ""; echo "Likes:"; set -x
    sqlite3 -batch -line var/insta485.sqlite3 'SELECT * FROM likes'

elif [ "$1" = "random" ]; then
    if [ ! -f var/insta485.sqlite3 ]; then  # -f [path] checks for existence of path
        echo "Database doesn't exist yet, creating..."
        bin/insta485db create
    fi  # closes if statement
    DB_FILENAME=var/insta485.sqlite3
    for i in `seq 1 100`; do
    FILENAME="$(uuidgen).png"
    NUMS=()
    for j in `seq 1 6`; do
        NUMS+=($(($RANDOM % 255)))
    done
    convert -size 360x360 \
            radial-gradient:"rgb(${NUMS[0]},${NUMS[1]},${NUMS[2]})-rgb(${NUMS[3]},${NUMS[4]},${NUMS[5]})" \
            -pointsize 64 -fill black -gravity center -annotate 0 "image $i" "var/uploads/$FILENAME"
    OWNER="awdeorio"
    # NOTE: the line below originally had a "-echo" flag, which has been removed to avoid
    #   flooding the command line. If the AG has issues, return it.
    sqlite3 -batch ${DB_FILENAME} "INSERT INTO posts(filename, owner) VALUES('${FILENAME}','${OWNER}');"
    done
    echo "100 new random files have been added to the database!"

else
    echo "Unknown option."; echo "Usage: ./bin/insta485db (create|destroy|reset|dump|random)"
fi  # closes if statement